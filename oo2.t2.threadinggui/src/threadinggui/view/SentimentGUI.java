package threadinggui.view;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import threadinggui.model.SentimentWorker;

/**
 * This class is arguably fulfilling the roles of both controller and view.
 * @author ben-laptop
 */
public class SentimentGUI extends javax.swing.JFrame {

    /**
     * Creates new form SentimentGUI
     */
    public SentimentGUI() {
        initComponents();

        
        final SentimentGUI outer = this;
        
        // The GUI needs to respond to changes in our SwingWorker (we can think of this as the model).
        // Two approaches to the observer pattern an shown below. 
        
        // Reflect on the advantages and disadvantages of the two approaches, think about:
        //  - Refactoring.
        //  - Scalability with large numbers of properties and/or large programs.
        //  - Potential performance issues.
        //  - Overall simplicity.
        
        // This bit of the code is what some people consider the "controller" role.
        // We could refactor this code into a separate controller, do you think it would make things clearer?
        
        // The observers are anonymous classes. Note that 'this' becomes ambigious- so we set 'outer'.
        _worker.addPropertyChangeListener(
                
                
                new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("progress")) {
                    outer._progressBar.setValue((int) evt.getNewValue());
                }
            }
        }
                
                );
        
        // We perhaps should have used Observable interface. Will refactor next week.
        _worker.addIsDoneChangedObserver(
                new Observer() {

                        @Override
                        public void update(Observable o, Object arg) {
                            _progressBar.setValue((Integer)arg);
                        }
                }
                
                );
        
        // c.f. event handlers in C#: http://msdn.microsoft.com/en-us/library/aa645739%28v=vs.71%29.aspx
        
        // However... exciting things coming in Java 8!
        
        // http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html
        // http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _OKButton = new javax.swing.JButton();
        _progressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        _OKButton.setText("OK");
        _OKButton.setName("OKButton"); // NOI18N
        _OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _OKButtonActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButton_defaultAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(_progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(_OKButton)))
                .addContainerGap(146, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(67, 67, 67))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(_OKButton)
                .addGap(18, 18, 18)
                .addComponent(_progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__OKButtonActionPerformed

        
        //Create a file chooser
final JFileChooser fc = new JFileChooser();

//In response to a button click:
int returnVal = fc.showOpenDialog(this);


    if (JFileChooser.APPROVE_OPTION == returnVal) {

            // We expect to be on the worker thread here.
            System.out.println("about to call execute() on "
                    + Thread.currentThread().getName() + ".");

            // Start the background task.
            // This will return in a fraction of a second...
            _worker.execute();

            _progressBar.setValue(0);

            // Turn off the button until it is done.
            _OKButton.setEnabled(false);
    }
    }//GEN-LAST:event__OKButtonActionPerformed

    private void randomButton_defaultAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButton_defaultAction
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
 
                System.out.println("run: " + 
                        Thread.currentThread().getName());
                   
                
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        _progressBar.setValue(50);
                    }
                });
            }
        });
        t.run();
    }//GEN-LAST:event_randomButton_defaultAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _OKButton;
    private javax.swing.JProgressBar _progressBar;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
    
    // Currently, I have the view owning the model. This is perhaps not strict MVC.
    private SentimentWorker _worker = new SentimentWorker();
}
